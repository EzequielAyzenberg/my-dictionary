{"version":3,"sources":["logo.svg","model/definition.js","util/parser.js","views/dictionary-editor/present.js","util/filter.js","views/dictionary-editor/index.js","util/welcome.js","global-styles.js","App.js","index.js","registerServiceWorker.js"],"names":["String","prototype","capitalize","this","toUpperCase","substr","Definition","name","description","subDefinitions","line","parts","split","length","trimEnd","trim","update","Parser","text","ts","TreeMap","und","def","forEach","startsWith","push","set","of","has","delete","present","treemap","content","k","v","join","Filter","iterator","criteria","filtered","value","LocalStorageKey","generateSortedText","t","parseText","initEditorText","localStorage","getItem","initData","DictionaryEditor","refs","aceEditor","React","createRef","useState","searchResults","setSearchResults","editorText","setEditorText","treeMap","setTreeMap","useEffect","editor","current","resize","commands","addCommand","exec","setItem","console","log","bindKey","mac","win","currentColumn","getSelectionRange","start","column","currentRow","row","currentLine","session","getLine","sortedText","newPos","results","keys","s","toFind","get","toLine","indexOf","gotoLine","editorProps","$blockScrolling","height","mode","theme","width","ref","onChange","className","type","placeholder","e","toSearch","target","first","showSearchStatus","GlobalStyle","createGlobalStyle","App","Component","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error"],"mappings":"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","file":"static/js/main.7115a394.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","String.prototype.capitalize = function () {\n    if (this[0])\n        return this[0].toUpperCase() + this.substr(1)\n    else\n        return this\n}\n\nexport default class Definition {\n\n    constructor(name, description=\"\", subDefinitions=[]) {\n        this.name = name\n        this.description = description\n        this.subDefinitions = subDefinitions\n    }\n\n    update(line) {\n        const parts = line.split(\"-\")\n        if (parts.length > 1) {\n            this.name = parts[0].trimEnd().capitalize()\n            this.description = parts[1].trim()\n        } else {\n            this.name = line.capitalize()\n        }\n        return this\n    }\n\n    toLine() {\n        return `${this.name} - ${this.description}`\n    }\n\n    static of (line) {\n        return new Definition(\"\").update(line)\n    }\n}","import {TreeMap} from \"jstreemap\";\nimport Definition from \"../model/definition\";\n\nexport default class Parser {\n\n    parseText(text) {\n        const ts = new TreeMap()\n        const und = new Definition(\"Undefined\")\n        let def = und\n\n        text.split(\"\\n\").forEach(line => {\n            if (line.startsWith(\"-\")){\n                def.subDefinitions.push(line)\n            } else {\n                ts.set(def.name, def)\n                def = Definition.of(line)\n            }\n        })\n\n        if (!ts.has(def.name)) {\n            ts.set(def.name, def)\n        }\n\n        if (und.subDefinitions.length === 0) {\n            ts.delete(und.name)\n        }\n\n        return ts\n    }\n}","export default function present(treemap) {\n    let content = \"\"\n    for (let [k,v] of treemap) {\n        if (k === \"\") continue\n        content += `${v.name} - ${v.description}\\n`\n        if (v.subDefinitions.length > 0) {\n            content += v.subDefinitions.join(\"\\n\") + \"\\n\"\n        }\n        content += \"\\n\"\n    }\n\n    return content\n}","export function Filter(iterator, criteria) {\n    const filtered = []\n\n    // iterate values\n    for (let value of iterator) {\n        if (criteria(value)) filtered.push(value)\n    }\n\n    return filtered\n}","import React, { memo, useState, useEffect } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-yaml';\nimport 'ace-builds/src-noconflict/theme-dracula';\nimport welcomeTxt from '../../util/welcome'\nimport Parser from \"../../util/parser\";\nimport present from \"./present\";\nimport {Filter} from \"../../util/filter\";\n\nconst LocalStorageKey = 'definitions';\n\nconst generateSortedText = text => {\n    const t = new Parser().parseText(text)\n    return [ present(t), t ]\n}\n\n// inits\nconst initEditorText = localStorage.getItem(LocalStorageKey) || welcomeTxt;\nconst initData = generateSortedText(initEditorText);\n\nexport function DictionaryEditor() {\n\n    // refs\n    const refs = { aceEditor: React.createRef() };\n\n    // State Hooks\n    const [searchResults, setSearchResults] = useState([]);\n    const [editorText, setEditorText] = useState(initData[0]);\n    const [treeMap, setTreeMap] = useState(initData[1])\n\n    useEffect(() => {\n        const editor = refs.aceEditor.current.editor;\n        editor.resize(true);\n        editor.commands.addCommand({\n            name: \"saver\",\n            exec: function() {\n                localStorage.setItem(LocalStorageKey, editorText);\n                console.log(\"saved!\")\n            },\n            bindKey: {mac: \"cmd-s\", win: \"ctrl-s\"}\n        })\n        editor.commands.addCommand({\n            name: \"sorter\",\n            exec: function() {\n                const currentColumn = editor.getSelectionRange().start.column;\n                const currentRow = editor.getSelectionRange().start.row;\n                const currentLine = editor.session.getLine(currentRow).capitalize();\n                const [sortedText, t] = generateSortedText(editorText);\n                let newPos = currentRow\n                const results = currentLine && Filter(t.keys(), s => s.startsWith(currentLine))\n                if (results.length > 0) {\n                    const toFind = t.get(results[0]).toLine()\n                    newPos = sortedText.split(\"\\n\").indexOf(toFind)\n                }\n                setEditorText(sortedText)\n                setTreeMap(t)\n                editor.gotoLine(newPos+1, currentColumn, true);\n                console.log(\"sorted!\")\n            },\n            bindKey: {mac: \"cmd-r\", win: \"ctrl-r\"}\n        })\n    })\n\n    const onSearch = e => {\n        const toSearch = e.target.value\n        let results = []\n        if (toSearch !== \"\") {\n            results = Filter(treeMap.keys(), s => s.startsWith(toSearch.capitalize()))\n        }\n        setSearchResults(results)\n\n        if (results.length > 0) {\n            const editor = refs.aceEditor.current.editor;\n            const currentRow = editor.getSelectionRange().start.row;\n            const first = results[0]\n            const line = treeMap.get(first).toLine()\n            const newPos = editorText.split(\"\\n\").indexOf(line) || currentRow\n            editor.gotoLine(newPos+1, 0, true);\n        }\n    }\n\n    const showSearchStatus = () => {\n        const length = searchResults.length;\n        if (length === 0) {\n            return \"\"\n        } else if (length === 1) {\n            return `Found 1 result. First: ${searchResults[0]}`\n        } else {\n            return `Found ${length} results. First: ${searchResults[0]}`\n        }\n    }\n\n    return (\n        <div>\n            <AceEditor\n                editorProps={{ $blockScrolling: true }}\n                height=\"calc(100vh - 30px)\"\n                mode=\"yaml\"\n                name=\"ace-editor\"\n                theme=\"dracula\"\n                width=\"100%\"\n                ref={refs.aceEditor}\n                value={editorText}\n                onChange={setEditorText}\n            />\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <input type=\"search\"\n                           className=\"col-12 search-box\"\n                           placeholder=\"Search\"\n                           onChange={onSearch}/>\n                </div>\n                <div className=\"col-4\">{showSearchStatus()}</div>\n                <div className=\"col-2\">CMD+S=Save CMD+R=Reload/Sort</div>\n            </div>\n\n        </div>\n    )\n}","const welcomeText = `\nsisi - wow\n\nsasa - wav\n`\n\nexport default welcomeText","import { createGlobalStyle } from 'styled-components';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst GlobalStyle = createGlobalStyle`\n  body { \n    background-color: #404040;\n    color: #f3e8e8;\n  }\n  \n  .search-box, .search-box:focus-visible {\n    background-color: #404040;\n    border: #404040;\n    color: #f3e8e8;\n  }\n\n`;\n\n// .container {\n//   height: calc(100vh - 44px);\n// }\n\nexport default GlobalStyle;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {DictionaryEditor} from \"./views/dictionary-editor\";\nimport GlobalStyle from \"./global-styles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <DictionaryEditor/>\n        <GlobalStyle/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}